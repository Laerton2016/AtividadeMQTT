<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://xmlns.jcp.org/jsf/html"
      xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
      xmlns:f="http://xmlns.jcp.org/jsf/core">
    
<h:head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <link type="text/css" rel="stylesheet" href="http://shutterstock.github.io/rickshaw/src/css/graph.css"/>
  <link type="text/css" rel="stylesheet" href="http://shutterstock.github.io/rickshaw/src/css/detail.css"/>
  <link type="text/css" rel="stylesheet" href="http://shutterstock.github.io/rickshaw/src/css/legend.css"/>
  <link type="text/css" rel="stylesheet" href="http://shutterstock.github.io/rickshaw/examples/css/extensions.css?v=2"/>

</h:head>
  <h:body onload="init();" >
        <div id="content" >
            <div id="chart" >
                    
            </div>
            <div>
                <input type="submit" value="off" onclick="off();" />
                <input type="submit" value="on" onclick="on();" />
                <a>Via Mqtt</a>
    </div>
        </div>
        <h:form id="form-dados">
                <div>
                    <h:commandButton value="off"  >
                        <f:ajax listener="#{controladorMQTT.desligar()}"/>
                    </h:commandButton>
                    <h:commandButton value="on"  >
                        <f:ajax listener="#{controladorMQTT.ligar()}"/>
                    </h:commandButton>
                    <a>Via Rest</a>
                </div>
            <div>
                <h:inputText id="limite" value="#{controladorMQTT.temMax}">
                    <f:ajax render=":form-dados:limite" />
                </h:inputText>
                <h:commandButton id="btLimite" value="Enviar temperatura máxima">
                    <f:ajax listener="#{controladorMQTT.ajustarTemp()}"/>
                </h:commandButton>
            </div>
        </h:form>
  <script src="http://shutterstock.github.io/rickshaw/vendor/d3.v2.js" type="text/javascript"></script>
  <script src="http://shutterstock.github.io/rickshaw/rickshaw.min.js" type="text/javascript"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/paho-mqtt/1.0.1/mqttws31.min.js" type="text/javascript"></script>
  <script src="Script/jquery.1.4.2.min.js" type="text/javascript"/>
<script type="text/javascript">
      // var wsbroker = "localhost";
      // var wsport = 9001 
      // var client = new Paho.MQTT.Client(wsbroker, wsport, '', "myclientid_" + parseInt(Math.random() * 100, 10));
      
      var wsbroker = "iot.eclipse.org"; 
      var wsport = 80 
      var client = new Paho.MQTT.Client(wsbroker, wsport, '/ws', "myclientid_" + parseInt(Math.random() * 100, 10));
      

          var tv = 500;

          var graph = new Rickshaw.Graph( {
            element: document.getElementById("chart"),
            width: 500,
            height: 400,
            renderer: 'line',
            series: new Rickshaw.Series.FixedDuration([{ name: 'one' }], undefined, {
              timeInterval: tv,
              maxDataPoints: 70,
              timeBase: new Date().getTime() / 1000
            })
          } );

          graph.render();

      client.onConnectionLost = function (responseObject) {
        console.log("conexão perdida: " + responseObject.errorMessage);
      };

      client.onMessageArrived = function (message) {
        console.log(message.destinationName, ' -- ', message.payloadString);
        var randInt = Math.floor(Math.random()*100);
      	dados = (Math.sin(message.payloadString++ / 40) + 4) * (randInt + 400);
        var data = { one:dados};
        graph.series.addData(data);
        graph.render();
      };
      var options = {
        timeout: 3,
        onSuccess: function () {
          console.log("conectado ao servidor");
          client.subscribe('sensor/temperatura', {qos: 1});
          message = new Paho.MQTT.Message("100");
          message.destinationName = "sensor/temperatura";
          client.send(message);
        },
        onFailure: function (message) {
          console.log("connexão falhou: " + message.errorMessage);
        }
      };
    function init() {
        client.connect(options);
    }
    
    function off() {
      message = new Paho.MQTT.Message("1");
      message.destinationName = "atuador/temperatura";
      client.send(message);
    }
    function on() {
      message = new Paho.MQTT.Message("0");
      message.destinationName = "atuador/temperatura";
      client.send(message);
    }
      </script>
  </h:body>

</html>

